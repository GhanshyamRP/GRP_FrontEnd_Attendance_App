{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n    this.userurl = \"http://localhost:8080/user\";\n    this.loginurl = \"http://localhost:8080/login\";\n    this.atturl = \"http://localhost:8080/attendance\";\n    this.entryurl = \"http://localhost:8080/entry\";\n  }\n  addUser(user) {\n    return this.http.post(this.userurl + \"/add\", user);\n  }\n  login(log) {\n    return this.http.post(this.loginurl, log);\n  }\n  gettodaydata(id) {\n    return this.http.get(this.atturl + \"/\" + id);\n  }\n  getmydata(id) {\n    return this.http.get(this.atturl + \"/list/\" + id);\n  }\n  updatesignintime(x) {\n    return this.http.post(this.entryurl + \"/add\", x);\n  }\n  getalluser() {\n    return this.http.get(this.userurl + \"/list\");\n  }\n  static #_ = this.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["DataService","constructor","http","userurl","loginurl","atturl","entryurl","addUser","user","post","login","log","gettodaydata","id","get","getmydata","updatesignintime","x","getalluser","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["F:\\PROFFESIONAL DOCS\\MY - Coding\\my language\\Jforce Sol\\attendanceApp\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Login } from '../class/login';\nimport { Observable } from 'rxjs';\nimport { User } from '../class/user';\nimport { Err } from '../class/err';\nimport { HttpClient } from '@angular/common/http';\nimport { Attendance } from '../class/attendance';\nimport { Entry } from '../class/entry';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  \n  private userurl:string = \"http://localhost:8080/user\";\n  private loginurl:string = \"http://localhost:8080/login\";\n  private atturl:string = \"http://localhost:8080/attendance\";\n  private entryurl:string = \"http://localhost:8080/entry\";\n\n  constructor(private http:HttpClient){}\n\n  public addUser(user:any){\n      return this.http.post(this.userurl+\"/add\",user);\n  }\n\n  public login(log:Login):Observable<User | Err>{\n        return this.http.post<User |  Err>(this.loginurl,log);\n  }\n\n  public gettodaydata(id:any):Observable<Attendance>{\n      return this.http.get<Attendance>(this.atturl+\"/\"+id)\n  }\n\n  public getmydata(id:any):Observable<Attendance[]>{\n    return this.http.get<Attendance[]>(this.atturl+\"/list/\"+id)\n  }\n\n  public updatesignintime(x:Entry){\n    return this.http.post(this.entryurl+\"/add\", x);\n  }\n\n\n  public getalluser():Observable<User[]>{\n    return this.http.get<User[]>(this.userurl+\"/list\")\n  }\n\n}\n"],"mappings":";;AAYA,OAAM,MAAOA,WAAW;EAOtBC,YAAoBC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,OAAO,GAAU,4BAA4B;IAC7C,KAAAC,QAAQ,GAAU,6BAA6B;IAC/C,KAAAC,MAAM,GAAU,kCAAkC;IAClD,KAAAC,QAAQ,GAAU,6BAA6B;EAElB;EAE9BC,OAAOA,CAACC,IAAQ;IACnB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,OAAO,GAAC,MAAM,EAACK,IAAI,CAAC;EACnD;EAEOE,KAAKA,CAACC,GAAS;IAChB,OAAO,IAAI,CAACT,IAAI,CAACO,IAAI,CAAc,IAAI,CAACL,QAAQ,EAACO,GAAG,CAAC;EAC3D;EAEOC,YAAYA,CAACC,EAAM;IACtB,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAa,IAAI,CAACT,MAAM,GAAC,GAAG,GAACQ,EAAE,CAAC;EACxD;EAEOE,SAASA,CAACF,EAAM;IACrB,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAe,IAAI,CAACT,MAAM,GAAC,QAAQ,GAACQ,EAAE,CAAC;EAC7D;EAEOG,gBAAgBA,CAACC,CAAO;IAC7B,OAAO,IAAI,CAACf,IAAI,CAACO,IAAI,CAAC,IAAI,CAACH,QAAQ,GAAC,MAAM,EAAEW,CAAC,CAAC;EAChD;EAGOC,UAAUA,CAAA;IACf,OAAO,IAAI,CAAChB,IAAI,CAACY,GAAG,CAAS,IAAI,CAACX,OAAO,GAAC,OAAO,CAAC;EACpD;EAAC,QAAAgB,CAAA,G;qBAhCUnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}