{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LogComponent = class LogComponent {\n  constructor(route, serv) {\n    this.route = route;\n    this.serv = serv;\n    this.att = new Attendence();\n    this.currentTime = '';\n  }\n  ngOnInit() {\n    let x = sessionStorage.getItem('username');\n    if (x != null && !sessionStorage.getItem('y')) {\n      document.location.reload();\n      sessionStorage.setItem('y', \"1\");\n    }\n    this.gettodaydata();\n    this.updateTime();\n    setInterval(() => this.updateTime(), 1000); // Update the time every second\n  }\n\n  updateTime() {\n    const now = new Date();\n    this.currentTime = now.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      hour12: true\n    });\n  }\n  gettodaydata() {\n    let id = sessionStorage.getItem('id');\n    console.log(id);\n    this.serv.gettodaydata(id).subscribe(data => {\n      this.att = data;\n      console.log(\"Data found\" + data);\n    });\n  }\n  signIn() {\n    this.att.signIn = this.currentTime;\n    console.log(this.att);\n    this.serv.updatesignintime(this.att).subscribe(data => {\n      console.log(\"signin time updated\");\n    });\n  }\n  signOut() {\n    this.att.signOut = this.currentTime;\n    console.log(this.att);\n    this.serv.updatesignOuttime(this.att).subscribe(data => {\n      console.log(\"signin time updated\");\n    });\n  }\n  gotomyreport() {\n    let id = sessionStorage.getItem('id');\n    this.route.navigate(['myreport', id]);\n  }\n};\nLogComponent = __decorate([Component({\n  selector: 'app-log',\n  templateUrl: './log.component.html',\n  styleUrls: ['./log.component.css']\n})], LogComponent);","map":{"version":3,"names":["Component","LogComponent","constructor","route","serv","att","Attendence","currentTime","ngOnInit","x","sessionStorage","getItem","document","location","reload","setItem","gettodaydata","updateTime","setInterval","now","Date","toLocaleTimeString","hour","minute","second","hour12","id","console","log","subscribe","data","signIn","updatesignintime","signOut","updatesignOuttime","gotomyreport","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["F:\\PROFFESIONAL DOCS\\MY - Coding\\my language\\Jforce Sol\\attendanceApp\\src\\app\\comp\\log\\log.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-log',\n  templateUrl: './log.component.html',\n  styleUrls: ['./log.component.css']\n})\nexport class LogComponent {\n\n  public att:Attendence  = new Attendence();\n  public currentTime: any='';\n\n  constructor(private route:Router,private serv:DataService){}\n\n  ngOnInit(){\n    let x =sessionStorage.getItem('username');\n    if(x!=null && !sessionStorage.getItem('y') ){\n      document.location.reload();\n     sessionStorage.setItem('y',\"1\");\n    }\n    \n    this.gettodaydata();\n\n    this.updateTime();\n    setInterval(() => this.updateTime(), 1000); // Update the time every second\n  \n  }\n  updateTime(): void {\n    const now = new Date();\n    this.currentTime = now.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true });\n  }\n  gettodaydata(){\n    let id = sessionStorage.getItem('id');\n    console.log(id);\n      this.serv.gettodaydata(id).subscribe(data=>{\n        this.att = data;\n        console.log(\"Data found\" + data)\n      })\n\n    }\n\n    \n  signIn(){\n    this.att.signIn = this.currentTime;\n    console.log(this.att);\n    this.serv.updatesignintime(this.att).subscribe(data=>{\n      console.log(\"signin time updated\");\n    })\n\n  }\n  signOut(){\n    this.att.signOut = this.currentTime;\n    console.log(this.att);\n    this.serv.updatesignOuttime(this.att).subscribe(data=>{\n      console.log(\"signin time updated\");\n    })\n\n  }\n\n  gotomyreport(){\n      let id =sessionStorage.getItem('id')\n    this.route.navigate(['myreport',id]);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,WAAMC,YAAY,GAAlB,MAAMA,YAAY;EAKvBC,YAAoBC,KAAY,EAASC,IAAgB;IAArC,KAAAD,KAAK,GAALA,KAAK;IAAgB,KAAAC,IAAI,GAAJA,IAAI;IAHtC,KAAAC,GAAG,GAAe,IAAIC,UAAU,EAAE;IAClC,KAAAC,WAAW,GAAM,EAAE;EAEiC;EAE3DC,QAAQA,CAAA;IACN,IAAIC,CAAC,GAAEC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IACzC,IAAGF,CAAC,IAAE,IAAI,IAAI,CAACC,cAAc,CAACC,OAAO,CAAC,GAAG,CAAC,EAAE;MAC1CC,QAAQ,CAACC,QAAQ,CAACC,MAAM,EAAE;MAC3BJ,cAAc,CAACK,OAAO,CAAC,GAAG,EAAC,GAAG,CAAC;;IAGhC,IAAI,CAACC,YAAY,EAAE;IAEnB,IAAI,CAACC,UAAU,EAAE;IACjBC,WAAW,CAAC,MAAM,IAAI,CAACD,UAAU,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;EAE9C;;EACAA,UAAUA,CAAA;IACR,MAAME,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAI,CAACb,WAAW,GAAGY,GAAG,CAACE,kBAAkB,CAAC,OAAO,EAAE;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,MAAM,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAI,CAAE,CAAC;EAC7H;EACAT,YAAYA,CAAA;IACV,IAAIU,EAAE,GAAGhB,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC;IACrCgB,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;IACb,IAAI,CAACtB,IAAI,CAACY,YAAY,CAACU,EAAE,CAAC,CAACG,SAAS,CAACC,IAAI,IAAE;MACzC,IAAI,CAACzB,GAAG,GAAGyB,IAAI;MACfH,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGE,IAAI,CAAC;IAClC,CAAC,CAAC;EAEJ;EAGFC,MAAMA,CAAA;IACJ,IAAI,CAAC1B,GAAG,CAAC0B,MAAM,GAAG,IAAI,CAACxB,WAAW;IAClCoB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvB,GAAG,CAAC;IACrB,IAAI,CAACD,IAAI,CAAC4B,gBAAgB,CAAC,IAAI,CAAC3B,GAAG,CAAC,CAACwB,SAAS,CAACC,IAAI,IAAE;MACnDH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;EAEJ;EACAK,OAAOA,CAAA;IACL,IAAI,CAAC5B,GAAG,CAAC4B,OAAO,GAAG,IAAI,CAAC1B,WAAW;IACnCoB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACvB,GAAG,CAAC;IACrB,IAAI,CAACD,IAAI,CAAC8B,iBAAiB,CAAC,IAAI,CAAC7B,GAAG,CAAC,CAACwB,SAAS,CAACC,IAAI,IAAE;MACpDH,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;EAEJ;EAEAO,YAAYA,CAAA;IACR,IAAIT,EAAE,GAAEhB,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC;IACtC,IAAI,CAACR,KAAK,CAACiC,QAAQ,CAAC,CAAC,UAAU,EAACV,EAAE,CAAC,CAAC;EACtC;CACD;AAxDYzB,YAAY,GAAAoC,UAAA,EALxBrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,SAAS;EACnBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,qBAAqB;CAClC,CAAC,C,EACWvC,YAAY,CAwDxB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}